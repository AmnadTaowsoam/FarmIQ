version: "3.9"
name: farmiq-cloud

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports: ["2181:2181"]
    networks: [farm_cloud]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    restart: unless-stopped
    depends_on: [zookeeper]
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks: [farm_cloud]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    depends_on: [kafka]
    ports: ["8081:8080"]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks: [farm_cloud]

  service-db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${SERVICE_DB_PASS}
      POSTGRES_DB: ${SERVICE_DB_NAME}
    ports: ["5433:5432"]
    volumes:
      - cloud-db:/var/lib/postgresql/data
      - ./db/initdb.d:/docker-entrypoint-initdb.d:ro
    networks: [farm_cloud]

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks: [farm_cloud]

  api-gateway:
    build: ./services/cloud-api
    restart: unless-stopped
    environment:
      KAFKA_BROKERS: kafka:9092
      SERVICE_DB_DSN: postgresql://${SERVICE_DB_USER}:${SERVICE_DB_PASS}@service-db:5432/${SERVICE_DB_NAME}
      MINIO_ENDPOINT: http://minio:9000
    depends_on: [kafka, service-db, minio]
    networks: [farm_cloud]
    ports: ["8080:8080"]

  auth-service:
    build: ./services/auth-service
    restart: unless-stopped
    environment:
      SERVICE_DB_DSN: postgresql://${SERVICE_DB_USER}:${SERVICE_DB_PASS}@service-db:5432/${SERVICE_DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
    depends_on: [service-db]
    networks: [farm_cloud]

  devices-service: # Device Mgmt + OTA Controller
    build: ./services/devices-service
    restart: unless-stopped
    environment:
      SERVICE_DB_DSN: postgresql://${SERVICE_DB_USER}:${SERVICE_DB_PASS}@service-db:5432/${SERVICE_DB_NAME}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      KAFKA_BROKERS: kafka:9092
    depends_on: [service-db, minio, kafka]
    networks: [farm_cloud]
    ports: ["8200:8200"]

  monitoring-service:
    build: ./services/monitoring-service
    restart: unless-stopped
    environment:
      KAFKA_BROKERS: kafka:9092
      SERVICE_DB_DSN: postgresql://${SERVICE_DB_USER}:${SERVICE_DB_PASS}@service-db:5432/${SERVICE_DB_NAME}
    depends_on: [kafka, service-db]
    networks: [farm_cloud]

  dashboard-service:
    build: ./services/dashboard-service
    restart: unless-stopped
    environment:
      API_GATEWAY_URL: http://api-gateway:8080
    depends_on: [api-gateway]
    networks: [farm_cloud]
    ports: ["3000:3000"]

networks:
  farm_cloud:
    driver: bridge

volumes:
  cloud-db:
  minio-data:
